static int DistanceToChargingStation()
    {
        Node currentNode; //1
        //Getting the distances of each node
        for (int i = 0; i < 23; i++)    //23 + 1
        {
            currentNode = nodes[IndexOfShortestDistance()]; //23


            for (int j = 0; j < currentNode.GetConnections().Count; j++)  //23 * (n+1)
            {
                if (!GetNode(currentNode.GetConnections()[j]).GetVisited()) //23 * n
                {
                    int newDistance = currentNode.GetDistance() + currentNode.GetConnectionWeights()[j]; //23 * n


                    if (newDistance < GetNode(currentNode.GetConnections()[j]).GetDistance()) //23 *n
                    {
                        GetNode(currentNode.GetConnections()[j]).SetDistance(newDistance); //23 * n
                        shortestDistances[currentNode.GetConnections()[j] - 65] = newDistance; //23 * n
                    }
                }
            }
            currentNode.SetVisited(); //23
        }


        //Removing unoptimal routes
        for (int i = 0; i < 23; i++) //23+1
        {
            for (int j = 0; j < nodes[i].GetConnections().Count; j++) //23 * (n+1)
            {
                if (GetNode(nodes[i].GetConnections()[j]).GetDistance() > nodes[i].GetConnectionWeights()[j] + nodes[i].GetDistance())  //23 * n
                {
                    nodes[i].RemoveNode(nodes[i].GetConnections()[j]); //23 * n
                }
            }
        }


        // Reccomending the shortest path to each charging station
        Node[] chargingStations = new Node[4]
    {
            nodes[7],
            nodes[10],
            nodes[16],
            nodes[19]
    }; //1

        for (int i = 0; i < 4; i++) //4 + 1
        {
            currentNode = chargingStations[i]; //4

            List<char> route = new List<char>(); //4

            while (currentNode.GetName() != StartNodeName) //4 * (n+1)
            {
                route.Add(currentNode.GetName()); //4n
                currentNode = FindCloserNode(currentNode); //4n
            }
            //Adds the Root Node
            route.Add(currentNode.GetName()); //4

            Console.Write($"The shortest route to {chargingStations[i].GetName()} will be: "); //4
            for (int j = route.Count - 1; j >= 0; j--) //4 * (n+1)
            {
                if (j != 0)
                {
                    Console.Write($"{route[j]}, ");
                }
                else
                {
                    //Write the last element without a comma
                    Console.Write($"{route[j]} \n");
                } //4n
            }
            Console.WriteLine($"With a distance of {chargingStations[i].GetDistance()}"); //4
        }
    }


Time Complexity: 
O(1 + 23 + 1 + 23 + 23(n+1) + 23n + 23n + 23n + 23n + 23n + 23 + 23 + 1 + 23(n+1) + 23n + 23n + 1 + 4 + 1 + 4 + 4 + 4(n+1) + 4n + 4n + 4 + 4 + 4(n+1) + 4n + 4)


O(227n+175) → O(n) 


The main reason that the big O notation turned out to be O(n) was because I accidentally hardcoded it for this specific length of nodes rather than having it be able to handle any number, which would make it O(n^2)